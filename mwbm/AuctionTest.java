package mwbm;

import java.util.*;

public class AuctionTest {
    static int[] ports;

    private static void cleanup(AuctionAgent[] agentList){
        for(int i = 0; i < agentList.length; i++){
            if(agentList[i] != null){
                agentList[i].Kill();
            }
        }
        try // wait for all threads to die
        {
            Thread.sleep(1000);
        }
        catch(Exception e) { }
    }

    public static void main(String[] args) {
        final int n = 30;
        final int m = 30;
//        final double epsilon = Math.round(100*1.0/n)/100.0;
        final double epsilon = 0.1;

        System.out.println(epsilon);
        List<List<Double>> pricesList = new ArrayList<>();
        for (int i = 0; i<n; i++)
            pricesList.add(Arrays.asList(-1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0,
                    -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0,
                    -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0));
//        pricesList.add(Arrays.asList(-1.0, -1.0));
//        pricesList.add(Arrays.asList(-1.0, -1.0));
//        pricesList.add(Arrays.asList(-1.0, -1.0, -1.0));
//        pricesList.add(Arrays.asList(-1.0, -1.0, -1.0, -1.0));

        List<List<Double>> betaList = new ArrayList<>();
        for (int i = 0; i<n; i++)
            betaList.add(Arrays.asList(-1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0,
                    -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0,
                    -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0));
//        betaList.add(Arrays.asList(-1.0, -1.0));
//        betaList.add(Arrays.asList(-1.0, -1.0));
//        betaList.add(Arrays.asList(-1.0, -1.0, -1.0));
//        betaList.add(Arrays.asList(-1.0, -1.0, -1.0, -1.0));
//        betaList.add(Arrays.asList(-1, -1));

        List<HashMap<Integer, Integer>> neighborsList = new ArrayList<>();

        ports = new int[n];
        for(int i = 0 ; i < n; i++){
            ports[i] = 1100+i;
        }

//        double[] tempPrices = {0.0, 0.0};
//        double[] tempPrices = {0.0, 0.0, 0.0};
//        double[] tempPrices = {0.0, 0.0, 0.0, 0.0};
//        double[] tempPrices = {0.0, 0.0, 0.0, 0.0, 0.0};
//        double[] tempPrices = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
//        double[] tempPrices = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
//        double[] tempPrices = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
//        double[] tempPrices = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
        double[] tempPrices = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};


        Integer[][] tempNeighbors = {{1,},
                {0,2,},
                {1,3,},
                {2,4,},
                {3,5,},
                {4,6,},
                {5,7,},
                {6,8,},
                {7,9,},
                {8,10,},
                {9,11,},
                {10,12,},
                {11,13,},
                {12,14,},
                {13,15,},
                {14,16,},
                {15,17,},
                {16,18,},
                {17,19,},
                {18,20,},
                {19,21,},
                {20,22,},
                {21,23,},
                {22,24,},
                {23,25,},
                {24,26,},
                {25,27,},
                {26,28,},
                {27,29},
                {28,}};
        double[][] tempBeta = {{17, 8, 3, 17, 4, 1, 18, 12, 15, 18, 3, 13, 5, 13, 11, 14, 13, 3, 4, 2, 7, 18, 6, 7, 11, 4, 5, 17, 5, 13},
                {12, 16, 17, 10, 10, 7, 10, 18, 3, 8, 4, 7, 14, 20, 8, 3, 18, 14, 18, 1, 20, 16, 5, 12, 9, 18, 8, 15, 2, 18},
                {11, 10, 20, 7, 14, 19, 15, 5, 7, 17, 18, 9, 17, 16, 9, 12, 7, 8, 5, 2, 14, 13, 3, 1, 9, 13, 16, 13, 20, 20},
                {18, 7, 18, 18, 8, 14, 10, 11, 8, 14, 11, 11, 6, 8, 17, 9, 19, 1, 12, 2, 5, 12, 4, 17, 7, 20, 11, 3, 11, 3},
                {12, 3, 18, 16, 10, 1, 10, 19, 8, 9, 8, 20, 4, 12, 9, 10, 18, 9, 18, 10, 19, 8, 4, 1, 7, 3, 16, 12, 5, 17},
                {10, 18, 10, 4, 12, 9, 5, 1, 3, 12, 17, 10, 19, 8, 14, 1, 8, 15, 19, 6, 16, 5, 6, 3, 7, 15, 5, 19, 13, 5},
                {7, 10, 10, 14, 11, 7, 16, 15, 20, 15, 9, 18, 12, 9, 16, 7, 13, 20, 6, 1, 10, 15, 12, 9, 14, 17, 19, 20, 10, 12},
                {15, 13, 10, 16, 15, 17, 19, 18, 12, 15, 17, 6, 17, 11, 16, 20, 13, 13, 19, 7, 13, 14, 10, 4, 2, 8, 16, 8, 12, 12},
                {9, 11, 17, 1, 9, 10, 14, 11, 13, 5, 20, 9, 4, 9, 20, 8, 4, 19, 3, 13, 4, 7, 14, 16, 6, 9, 18, 18, 18, 18},
                {15, 4, 2, 11, 5, 3, 19, 20, 1, 8, 10, 6, 18, 2, 19, 19, 17, 15, 10, 13, 3, 10, 12, 15, 7, 19, 1, 19, 1, 10},
                {17, 1, 12, 4, 14, 20, 10, 14, 2, 19, 11, 18, 9, 17, 17, 3, 7, 4, 17, 8, 10, 18, 4, 19, 17, 11, 13, 16, 15, 7},
                {11, 15, 17, 11, 7, 4, 14, 6, 8, 6, 6, 1, 11, 13, 17, 17, 2, 20, 19, 3, 17, 13, 12, 12, 12, 4, 17, 6, 3, 15},
                {8, 20, 5, 9, 15, 9, 12, 17, 6, 9, 12, 11, 20, 11, 5, 11, 20, 1, 14, 11, 1, 17, 10, 20, 19, 9, 19, 14, 5, 11},
                {7, 10, 1, 1, 6, 7, 14, 1, 4, 3, 17, 9, 3, 18, 7, 14, 8, 19, 17, 16, 18, 16, 11, 12, 3, 2, 12, 14, 13, 2},
                {13, 18, 18, 4, 7, 19, 5, 18, 11, 6, 5, 6, 8, 9, 11, 8, 8, 12, 12, 17, 19, 20, 6, 12, 19, 16, 10, 11, 12, 11},
                {19, 12, 8, 3, 14, 2, 20, 15, 19, 13, 13, 13, 16, 3, 16, 9, 12, 18, 18, 11, 16, 1, 2, 14, 10, 17, 3, 18, 20, 11},
                {12, 7, 9, 11, 6, 11, 17, 15, 20, 16, 1, 8, 1, 13, 14, 11, 3, 4, 19, 20, 11, 16, 7, 14, 10, 4, 5, 10, 1, 3},
                {9, 12, 9, 4, 3, 8, 8, 2, 17, 1, 13, 12, 10, 5, 8, 13, 19, 19, 18, 19, 20, 11, 17, 12, 17, 1, 7, 11, 17, 17},
                {1, 8, 3, 15, 1, 6, 13, 1, 6, 10, 2, 16, 19, 19, 13, 16, 12, 13, 1, 19, 15, 4, 11, 2, 10, 9, 16, 12, 7, 20},
                {4, 15, 12, 14, 9, 14, 9, 11, 14, 15, 1, 18, 6, 8, 9, 9, 14, 7, 17, 6, 7, 1, 14, 2, 20, 5, 8, 12, 17, 18},
                {2, 10, 20, 9, 8, 5, 14, 12, 4, 15, 13, 12, 13, 11, 10, 2, 9, 16, 20, 17, 11, 2, 14, 8, 14, 16, 12, 3, 19, 19},
                {9, 1, 19, 20, 11, 3, 17, 8, 13, 13, 6, 14, 9, 4, 14, 2, 4, 5, 15, 18, 10, 1, 10, 2, 9, 15, 16, 19, 16, 8},
                {12, 20, 14, 9, 17, 10, 2, 15, 17, 15, 14, 2, 20, 7, 14, 11, 7, 7, 2, 13, 18, 9, 19, 9, 8, 4, 2, 13, 8, 15},
                {17, 10, 20, 13, 13, 17, 4, 10, 20, 15, 17, 11, 5, 5, 2, 4, 14, 10, 13, 3, 7, 13, 17, 15, 15, 7, 4, 10, 10, 4},
                {17, 5, 1, 1, 5, 6, 5, 9, 4, 8, 10, 12, 3, 19, 16, 14, 13, 1, 8, 18, 1, 10, 5, 7, 15, 14, 6, 14, 15, 15},
                {20, 4, 13, 16, 10, 19, 11, 19, 10, 18, 12, 6, 4, 3, 1, 14, 9, 14, 10, 9, 12, 10, 14, 6, 8, 12, 18, 9, 10, 3},
                {14, 14, 11, 12, 20, 3, 7, 12, 13, 1, 9, 14, 12, 2, 3, 3, 15, 14, 6, 20, 14, 14, 10, 10, 20, 3, 2, 11, 14, 1},
                {16, 8, 14, 4, 20, 18, 14, 13, 2, 13, 14, 1, 3, 18, 19, 2, 15, 7, 5, 9, 3, 15, 17, 19, 9, 12, 11, 12, 1, 7},
                {6, 7, 1, 14, 20, 6, 6, 4, 16, 20, 16, 11, 13, 20, 16, 17, 20, 19, 19, 2, 4, 1, 9, 20, 19, 4, 10, 7, 10, 7},
                {3, 11, 3, 11, 18, 13, 17, 16, 17, 15, 7, 14, 2, 8, 20, 3, 14, 13, 14, 9, 5, 20, 9, 17, 11, 1, 9, 9, 15, 10}};

        for(int i = 0; i < n; i++) {
            for(int j = 0; j < m; j++) {
                pricesList.get(i).set(j, tempPrices[j]);
                betaList.get(i).set(j, tempBeta[i][j]);
            }
        }
        HashMap<Integer, Integer> tempMap;
        for(int i=0; i<n; i++){
            tempMap = new HashMap<>();
            for(int k = 0; k<tempNeighbors[i].length; k++){
                tempMap.put(tempNeighbors[i][k], ports[tempNeighbors[i][k]]);
            }
            neighborsList.add(tempMap);
        }

        System.out.println(neighborsList);

        AuctionAgent[] agentList = new AuctionAgent[n];
        for(int i = 0; i < n; i++){
            agentList[i] = new AuctionAgent(i, pricesList.get(i), betaList.get(i), neighborsList.get(i), ports[i], n, epsilon);
            System.out.println(agentList[i]);
        }

        for(int i = 0; i < n; i++){
            agentList[i].StartAgent();
        }

        System.out.println("... Passed\n");
        try {
            Thread.sleep(10000);
        } catch (Exception e){
            e.printStackTrace();
        }
//        cleanup(agentList);
    }
}
