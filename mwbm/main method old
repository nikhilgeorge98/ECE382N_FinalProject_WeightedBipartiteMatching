public static void main(String[] args) {
    final int n = 3;
    final double epsilon = 1.0/n;
    final int m = 3;

    List<List<Double>> pricesList = new ArrayList<>();
    pricesList.add(Arrays.asList(-1.0, -1.0, -1.0));
    pricesList.add(Arrays.asList(-1.0, -1.0, -1.0));
    pricesList.add(Arrays.asList(-1.0, -1.0, -1.0));

    List<List<Double>> betaList = new ArrayList<>();
    betaList.add(Arrays.asList(-1.0, -1.0, -1.0));
    betaList.add(Arrays.asList(-1.0, -1.0, -1.0));
    betaList.add(Arrays.asList(-1.0, -1.0, -1.0));
//        betaList.add(Arrays.asList(-1, -1));

    List<HashMap<Integer, Integer>> neighborsList = new ArrayList<>();

    ports = new int[n];
    for(int i = 0 ; i < n; i++){
        ports[i] = 1100+i;
    }
//        for(int i = 0;i<ports.length;i++) {
//            System.out.println(ports[i]);
//        }

    double[] tempPrices = {5.0, 7.0, 13.0};
    double[][] tempBeta = {{11.0, 12.0, 15.0}, {15.0, 16.0, 18.0}, {9.0, 9.0, 14.0}};

    for(int i = 0; i < n; i++) {
        for(int j = 0; j < m; j++) {
            pricesList.get(i).set(j, tempPrices[j]);
            betaList.get(i).set(j, tempBeta[i][j]);
        }
    }
    HashMap<Integer, Integer> tempMap = new HashMap<>();
    tempMap.put(1, ports[1]);
    neighborsList.add(tempMap);
    tempMap = new HashMap<>();
    tempMap.put(0, ports[0]);
    tempMap.put(2, ports[2]);
    neighborsList.add(tempMap);
    tempMap = new HashMap<>();
    tempMap.put(1, ports[1]);
    neighborsList.add(tempMap);

    System.out.println(neighborsList);


    // initialize the above two list of lists - prices and beta
//        Agent[] agentList = initAgents(pricesList, betaList, neighborsList, n, epsilon);
    Agent[] agentList = new Agent[n];
    for(int i = 0; i < n; i++){
        agentList[i] = new Agent(i, pricesList.get(i), betaList.get(i), neighborsList.get(i), ports[i], n, epsilon);
    }
    System.out.println(agentList[0]);
    System.out.println(agentList[1]);
    System.out.println(agentList[2]);

    agentList[0].StartAgent();
    agentList[1].StartAgent();
    agentList[2].StartAgent();
    System.out.println("... Passed");
    try {
        Thread.sleep(10000);
    } catch (Exception e){
        e.printStackTrace();
    }
    cleanup(agentList);
}
